// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  username     String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  role         Role
  status       ActiveRemoved  @default(ACTIVE)
  TaskAssignee TaskAssignee[]
  User         User?          @relation(fields: [userId], references: [id])
  userId       String         @unique
  AccountLog   AccountLog[]
}

model AccountLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Account    Account? @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum Role {
  ADMIN
  STAFF
}

model Customer {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  address     String        @db.Text
  email       String        @db.VarChar(255)
  phone       String        @db.VarChar(255)
  status      ActiveRemoved @default(ACTIVE)
  Event       Event[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String        @unique
  CustomerLog CustomerLog[]
}

model CustomerLog {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       String    @db.VarChar(255)
  content    Json      @db.Json
  Customer   Customer? @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?     @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

model Event {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  dateStarted DateTime
  dateEnded   DateTime?
  type        String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  price       Decimal
  balance     Decimal
  status      EventStatus
  Customer    Customer?     @relation(fields: [customerId], references: [id])
  customerId  String?
  EventSupply EventSupply[]
  Payment     Payment[]
  Task        Task[]
  EventLog    EventLog[]
}

model EventLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Event      Event?   @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum EventStatus {
  ACTIVE
  UNPAID
  COMPLETED
  REMOVED
}

model EventSupply {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  quantity  Int
  status    ActiveRemoved
  Event     Event?        @relation(fields: [eventId], references: [id])
  eventId   String?
  Supply    Supply?       @relation(fields: [supplyId], references: [id])
  supplyId  String?
}

model Order {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  dateOrdered DateTime
  dateArrived DateTime?
  status      OrderStatus
  Supplier    Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId  String?
  OrderSupply OrderSupply[]
  OrderLog    OrderLog[]
}

model OrderLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Order      Order?   @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum OrderStatus {
  ACTIVE
  ARRIVED
  REMOVED
}

model OrderSupply {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  quantity  Int
  status    ActiveRemoved
  Order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?
  Supply    Supply?       @relation(fields: [supplyId], references: [id])
  supplyId  String?
}

model Payment {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  amount    Decimal
  status    ActiveRemoved
  Event     Event?        @relation(fields: [eventId], references: [id])
  eventId   String?
}

model Supplier {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  address     String        @db.Text
  email       String        @db.VarChar(255)
  phone       String        @db.VarChar(255)
  status      ActiveRemoved
  Order       Order[]
  SupplierLog SupplierLog[]
}

model SupplierLog {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       String    @db.VarChar(255)
  content    Json      @db.Json
  Supplier   Supplier? @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?     @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

model Supply {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  brand       String        @db.VarChar(255)
  quantity    Int
  unit        String        @db.VarChar(255)
  status      ActiveRemoved
  EventSupply EventSupply[]
  OrderSupply OrderSupply[]
  SupplyLog   SupplyLog[]
}

model SupplyLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Supply     Supply?  @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

model Task {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  dateDeadline DateTime
  name         String         @db.VarChar(255)
  status       TaskStatus
  Event        Event?         @relation(fields: [eventId], references: [id])
  eventId      String?
  TaskAssignee TaskAssignee[]
  TaskLog      TaskLog[]
}

model TaskLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  Task       Task?    @relation(fields: [objectId], references: [id])
  objectId   String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  REMOVED
}

model TaskAssignee {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    ActiveRemoved
  Account   Account?      @relation(fields: [accountId], references: [id])
  accountId String?
  Task      Task?         @relation(fields: [taskId], references: [id])
  taskId    String?
}

model User {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  lastName            String        @db.VarChar(255)
  firstName           String        @db.VarChar(255)
  middleName          String        @db.VarChar(255)
  suffix              String        @db.VarChar(255)
  gender              Gender
  birthDate           DateTime      @db.Date
  Account             Account?
  Customer            Customer?
  UserLog             UserLog[]
  AccountLogOperator  AccountLog[]  @relation("Operator")
  CustomerLogOperator CustomerLog[] @relation("Operator")
  EventLogOperator    EventLog[]    @relation("Operator")
  OrderLogOperator    OrderLog[]    @relation("Operator")
  SupplierLogOperator SupplierLog[] @relation("Operator")
  SupplyLogOperator   SupplyLog[]   @relation("Operator")
  TaskLogOperator     TaskLog[]     @relation("Operator")
  UserLogOperator     UserLog[]     @relation("Operator")
}

model UserLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @db.VarChar(255)
  content    Json     @db.Json
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Operator   User?    @relation("Operator", fields: [operatorId], references: [id])
  operatorId String?
}

enum Gender {
  MALE
  FEMALE
}

// global enums

enum AccountStatus {
  UNVERIFIED
  ACTIVE
  DEACTIVATED
  SUSPENDED
  REMOVED
}

enum Binary {
  YES
  NO
}

enum ActiveRemoved {
  ACTIVE
  REMOVED
}
